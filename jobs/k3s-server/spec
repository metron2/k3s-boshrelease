---
name: k3s-server

packages:
- k3s
- k9s
- kubectl-k3s
templates:
  config/bpm.yml: config/bpm.yml
  bin/pre-start.erb: bin/pre-start
  bin/post-start.erb: bin/post-start  
  bin/pre-stop.erb: bin/pre-stop
  bin/post-deploy.erb: bin/post-deploy
  bin/drain.erb: bin/drain
  bin/ctl.erb: bin/ctl
  config/registries.yaml.erb: config/registries.yaml
  config/registry.ca.erb: config/registry.ca
  config/registry.cert.erb: config/registry.cert
  config/registry.key.erb: config/registry.key
  config/token.csv.erb: config/token.csv
  bin/envrc: bin/envrc
  bin/setup-user-env.erb: bin/setup-user-env
  bin/k3s-killall.sh: bin/k3s-killall.sh

  config/datastore-cafile.erb: config/datastore-cafile
  config/datastore-certfile.erb: config/datastore-certfile
  config/datastore-keyfile.erb: config/datastore-keyfile
  
  config/additional-manifest.yaml.erb: config/additional-manifest.yaml


# Documentation https://bosh.io/docs/links.html
# Tutorial      https://gist.github.com/Amit-PivotalLabs/c39528248b8cdc4ba8e347f8aa68abb6
consumes:
- name: k3s-server
  type: k3s-server
  optional: false

provides:
- name: k3s-server
  type: k3s-server

properties:

  containerd_registry:
    description: containerd registry configuration

  registry.mirrors.tls.cert:
    description: private registry certificate

  registry.mirrors.tls.key:
    description: private registry private key

  registry.mirrors.tls.ca:
    description: private registry ca

  k3s.v:
    description: "(logging) Number for the log level verbosity (default: 0)"
    default: 0
  k3s.bind-address value:
    description: "(listener) k3s bind address (default: 0.0.0.0)"
    default: 0.0.0.0
  k3s.flannel-backend:                    
    description: (networking) One of 'none', 'vxlan', 'ipsec', or 'wireguard'
    default: vxlan
  k3s.token:
    description: (cluster) Shared secret used to join a server or agent to a cluster [$K3S_TOKEN]


  k3s.kubelet-args: 
    description: (agent/flags) Customized flag for kubelet process
    default: []


#disable defaut k3s components
  k3s.disable: 
    description: (components) Do not deploy packaged components and delete any deployed components (valid itemms are coredns, servicelb, traefik, local-storage, metrics-server)
    default: []


## additional label and taints (added to k3s and bosh default labels) 
  k3s.node-labels:
    description: (agent/node) Registering and starting kubelet with set of labels
    default: []
  k3s.node-taints: 
    description: (agent/node) Registering kubelet with set of taints.format is key=value:Effect)
    default: []

## additional manifests to apply
  k3s.additional-manifests:
    default: []
    description: array of additionnel yaml to apply at k3s start


## drain options

  k3s.drain.delete-local-data:
    description:  continue even if there are pods using emptyDir (local data that will be deleted when the node is drained).
    default: false

  k3s.drain.disable-eviction: 
    description: force drain to use delete, even if eviction is supported. This will bypass checking PodDisruptionBudgets, use with caution
    default: false

  k3s.drain.grace-period:
    description: period of time in seconds given to each pod to terminate gracefully. If negative, the default value specified in the pod will be used.
    default: -1

  k3s.drain.ignore-daemonsets:
    description: Ignore DaemonSet-managed pods.
    default: true


  k3s.drain.skip-wait-for-delete-timeout:
    description: If pod DeletionTimestamp older than N seconds, skip waiting for the pod. Seconds must be greater than 0 to skip.
    default: 0

  k3s.drain.timeout:
    description: The length of time to wait before giving up, zero means infinite
    default: 0

  k3s.drain.pod-selector: #Not implemented
    description:  Label selector to filter pods on the node

  k3s.drain.selector:  #Not implemented
    description: Selector (label query) to filter on

## db options
  k3s.datastore-endpoint:
    description: Specify etcd, Mysql, Postgres, or Sqlite (default) data source name
  k3s.datastore-cafile:
    description: TLS Certificate Authority file used to secure datastore backend communication
  k3s.datastore-certfile:
    description: TLS certification file used to secure datastore backend communication
  k3s.datastore-keyfile:
    description: TLS key file used to secure datastore backend communication

## args
  k3s.kube-apiserver-arg:
    description: (flags) Customized flag for kube-apiserver process
    default: []

  k3s.kube-scheduler-arg:
    description: (flags) Customized flag for kube-scheduler process
    default: []

  k3s.kube-controller-manager-arg:
    description: (flags) Customized flag for kube-controller-manager process
    default: []

  k3s.kube-cloud-controller-manager-arg:
    description:  (flags) Customized flag for kube-cloud-controller-manager process
    default: []

#token-file
  k3s.token-file-content:
    description: token-file content. see https://kubernetes.io/docs/reference/access-authn-authz/authentication/#static-token-file

  k3s.master_vip_api:
    description: externaly defined vip ip for HA k3s (enables multi master instance groups). This is used for public api access, tls-san, and agents to server communication

  k3s.additional_tls_sans:
    description: array of additionnal tls-san for k8s api (added to default, ip, bosh-dns alias, or master vip if set)
    default: []


#done    
#   -v value                                   (logging) Number for the log level verbosity (default: 0)
#   --bind-address value                       (listener) k3s bind address (default: 0.0.0.0)
#   --flannel-backend value                    (networking) One of 'none', 'vxlan', 'ipsec', or 'wireguard' (default: "vxlan")
#   --token value, -t value                    (cluster) Shared secret used to join a server or agent to a cluster [$K3S_TOKEN]
#   --datastore-endpoint value                 (db) Specify etcd, Mysql, Postgres, or Sqlite (default) data source name [$K3S_DATASTORE_ENDPOINT]
#   --datastore-cafile value                   (db) TLS Certificate Authority file used to secure datastore backend communication [$K3S_DATASTORE_CAFILE]
#   --datastore-certfile value                 (db) TLS certification file used to secure datastore backend communication [$K3S_DATASTORE_CERTFILE]
#   --datastore-keyfile value                  (db) TLS key file used to secure datastore backend communication [$K3S_DATASTORE_KEYFILE]
#   --kube-apiserver-arg value                 (flags) Customized flag for kube-apiserver process
#   --kube-scheduler-arg value                 (flags) Customized flag for kube-scheduler process
#   --kube-controller-manager-arg value        (flags) Customized flag for kube-controller-manager process
#   --kube-cloud-controller-manager-arg value  (flags) Customized flag for kube-cloud-controller-manager process
#   --kubelet-arg value                        (agent/flags) Customized flag for kubelet process
#   --kube-proxy-arg value                     (agent/flags) Customized flag for kube-proxy process

#todo
#   --tls-san value                            (listener) Add additional hostname or IP as a Subject Alternative Name in the TLS cert
#   --node-name value                          (agent/node) Node name [$K3S_NODE_NAME]
#   --with-node-id                             (agent/node) Append id to node name
#   --docker                                   (agent/runtime) Use docker instead of containerd
#   --node-ip value, -i value                  (agent/networking) IP address to advertise for node
#   --node-external-ip value                   (agent/networking) External IP address to advertise for node

